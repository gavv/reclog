.\" Automatically generated by Pandoc 3.7.0.2
.\"
.TH "reclog" "1" "September 2025" "reclog 0.1.6"
.SH NAME
reclog \- Command\-line tool to capture command output to a file.
.SH SYNOPSIS
\f[B]reclog\f[R] [\f[I]OPTIONS\f[R]] \f[I]COMMAND\f[R]...
.SH DESCRIPTION
\f[B]reclog\f[R] runs specified command in a pty, connecting its own
stdin and stdout with pty\(aqs input and output, without blocking the
command.
In addition, it duplicates pty\(aqs output to a file, stripping out ANSI
escape codes.
.PP
It is similar to \f[B]unbuffer(1)\f[R] combined with \f[B]tee(1)\f[R]
and \f[B]ts(1)\f[R], but provides better user experience and robustness.
.SH OPTIONS
.TP
\f[B]\-H, \-\-header\f[R]
Before start, print header line (hostname, os, time, command).
.RS
.PP
Useful when you collect logs from different machines or invocations and
want to make them self\-describing.
.RE
.TP
\f[B]\-t, \-\-ts\f[R]
Prepend each line of the command output with current time.
.RS
.PP
This option enables behavior similar to \f[B]ts(1)\f[R].
It is useful when original program output does not include time
information.
.PP
How timestamps are calculated and formatted is defined by
\f[B]\-\-ts\-fmt\f[R] and \f[B]\-ts\-src\f[R] options.
.RE
.TP
\f[B]\-\-ts\-fmt\f[R] \f[I]FMT\f[R]
If \f[B]\-\-ts\f[R] is used, defines \f[B]strftime(3)\f[R] format
string.
.RS
.PP
Default format is \f[B]\(dq%T%.3f\(dq\f[R], which produces timestamps
like \(dq01:02:03.123\(dq.
.PP
Documentation for the format specifiers can be found on docs.rs page of
Rust crate \(dqchrono\(dq
(\f[I]https://docs.rs/chrono/latest/chrono/format/strftime/\f[R]).
.RE
.TP
\f[B]\-\-ts\-src\f[R] \f[I]SRC\f[R]
If \f[B]\-\-ts\f[R] is used, defines what timestamps to use: wallclock
(\f[I]wall\f[R]), elapsed time since program start (\f[I]elapsed\f[R]),
or delta between subsequent timestamps (\f[I]delta\f[R]).
.RS
.PP
Default source is \f[I]wall\f[R].
.PP
\f[I]wall\f[R], \f[I]elapsed\f[R], and \f[I]delta\f[R] values are
similar to \f[I]ts\f[R], \f[I]ts \-s\f[R], and \f[I]ts \-i\f[R] modes of
\f[B]ts(1)\f[R] command, respectively.
.RE
.TP
\f[B]\-o, \-\-output\f[R] \f[I]PATH\f[R]
Output file path.
.RS
.PP
If omitted, output path is generated automatically based on the command
basename (unless \f[B]\-\-null\f[R] is given).
E.g.
for \f[I]\(gareclog ls \-l\(aq\f[R], the output file is
\f[I]ls.log\f[R].
.PP
Unless \f[B]\-\-force\f[R] or \f[B]\-\-append\f[R] option is given,
output file should not exist, otherwise an error is reported.
.PP
If \f[B]\-\-output\f[R] is omitted and \f[B]\-\-force\f[R] is not
specified as well, and generated path already exist, a numeric suffix is
automatically added to the path.
E.g.
if \f[I]ls.log\f[R] already exists, reclog will try \f[I]ls\-1.log\f[R],
\f[I]ls\-2.log\f[R], and so on.
.RE
.TP
\f[B]\-f, \-\-force\f[R]
Overwrite output file if it already exists.
.RS
.PP
See description for \f[B]\-\-output\f[R] option for details.
.RE
.TP
\f[B]\-a, \-\-append\f[R]
Append to output file if it already exists.
.RS
.PP
See description for \f[B]\-\-output\f[R] option for details.
.RE
.TP
\f[B]\-N, \-\-null\f[R]
Don\(aqt write output file at all.
.RS
.PP
Has same effect as \f[I]\-\-output=/dev/null\f[R].
The output is still printed to stdout, unless \f[B]\-\-silent\f[R] is
specified.
.RE
.TP
\f[B]\-R, \-\-raw\f[R]
Don\(aqt strip ANSI escape codes when writing to output file.
.RS
.PP
By default, reclog writes raw output to stdout and stripped output to
the \f[B]\-\-output\f[R] file.
With this option, this stripping is disabled.
This will preserve colors in the saved file, but makes it harder to
grep.
.PP
Stripping is performed via Rust crate \(dqvte\(dq, a Rust implementation
of Paul Williams\(aq ANSI parser state machine
(\f[I]https://docs.rs/vte/latest/vte/\f[R]).
.RE
.TP
\f[B]\-s, \-\-silent\f[R]
Don\(aqt print anything to stdout.
.RS
.PP
Has same effect as \f[I]\(gareclog ...
> /dev/null\(aq\f[R].
The output is still printed to file, unless \f[B]\-\-null\f[R] is
specified.
.RE
.TP
\f[B]\-q, \-\-quit\f[R] \f[I]MILLISECONDS\f[R]
How long to wait for buffered data after getting EOF.
When child process exits, reclog continues reading pending output from
the pty until there is no data during the specified timeout.
This allows to reliably fetch all buffered data before exiting.
.RS
.PP
Also how long to wait for child to exit voluntarily until killing it
forcibly.
When emergency termination signal is received, like SIGQUIT, reclog
forwards it to the child and waits until it exits or timeout expires.
Then, if the child is still running, it forcibly kills the child with
SIGKILL.
.RE
.TP
\f[B]\-b, \-\-buffer\f[R] \f[I]LINES\f[R]
When stdout is slower than command output, buffer at max the specified
number of lines.
.RS
.PP
When command produces output faster than it can be written to
reclog\(aqs stdout (typically if it is a terminal or pipe), reclog
starts buffering lines until the specified limit is reached.
When the buffer is full, the oldest lines are removed.
.PP
This allows to ensure that the command is never slowed down by
displaying logs, and hence even verbose logs don\(aqt affect testing.
.PP
This option has no effect writing to \f[B]\-\-output\f[R] file, only
writing to reclog\(aqs stdout.
Output file always receives the full output.
.RE
.TP
\f[B]\-D, \-\-debug\f[R]
Enable debug logging to stderr.
.TP
\f[B]\-\-man\f[R]
Print man page in troff format to stdout and exit.
.TP
\f[B]\-h, \-\-help\f[R]
Print help to stdout and exit.
.TP
\f[B]\-V, \-\-version\f[R]
Print version information to stdout and exit.
.SH STDIN / STDOUT
reclog connects its own \f[I]stdin\f[R] with the pty input (from which
the command reads), and connects its \f[I]stdout\f[R] with the pty
output (to which the command writes).
.PP
Note that \f[I]stdout\f[R] gets interleaved output from command\(aqs
stdout and stderr (they both are redirected to the same pty).
Also note that stdout is rate\-limited, as defined by
\f[B]\-\-buffer\f[R] option.
.PP
reclog reads from stdin and writes to stdout one line at a time, with a
flush after each line.
If stdin is a tty, it switches it to the \f[I]canonical mode\f[R].
.PP
When reclog reads EOF from stdin, it propagates it to the child by
sending \f[B]VEOF\f[R] character to the master pty, which triggers EOF
condition on the slave pty after all pending input is read.
.PP
reclog does not exit after getting EOF from stdin or pty.
It initiates termination only when the child process exits, even if it
already finished I/O in both directions after getting EOFs.
.SH SESSION
The child process gets a separate SID (session ID) and PGID (process
group ID).
It becomes both a session leader and process group leader, and its SID
and PGID are equal to its PID.
.PP
The slave pty is set as the controlling tty of the child process.
.PP
SID, PGID, and controlling tty are automatically inherited by
grand\-children (unless they explicitly detach from them).
During termination, reclog (in cause of graceful termination) or kernel
(if reclog aborts or crashes) send signals to the whole process group.
This ensures that grand\-children, if present, are properly cleaned up
too.
.SH SIGNALS
All standard job control and termination signals are propagated to the
child PGID: \f[I]SIGTERM\f[R], \f[I]SIGINT\f[R], \f[I]SIGHUP\f[R],
\f[I]SIGQUIT\f[R], \f[I]SIGTSTP\f[R], \f[I]SIGTTIN\f[R],
\f[I]SIGTTOU\f[R], \f[I]SIGCONT\f[R], \f[I]SIGWINCH\f[R].
.PP
Handled signals can be divided into three categories:
.IP \(bu 2
Graceful termination: Hit \f[B]\(haC\f[R] (or send \f[I]SIGINT\f[R] or
\f[I]SIGTERM\f[R]) to terminate the child process gracefully and flush
pending logs.
Hit \f[B]\(haC\f[R] second time to forcibly kill the child (with
\f[I]SIGKILL\f[R]) if it\(aqs stuck.
.IP \(bu 2
Emergency termination: Hit \f[B]\(ha\(rs\f[R] (or send \f[I]SIGQUIT\f[R]
or \f[I]SIGHUP\f[R]) for emergency termination without flushing the
logs.
The child is given some short time to terminate properly, then is killed
forcibly with \f[I]SIGKILL\f[R].
.IP \(bu 2
Pause/resume: Hit \f[B]\(haZ\f[R] (or send \f[I]SIGTSTP\f[R],
\f[I]SIGTTIN\f[R], or \f[I]SIGTTOU\f[R]) to pause.
Hit \f[B]\(haZ\f[R] second time to forcibly pause the child (with
\f[I]SIGSTOP\f[R]) if it\(aqs stuck.
Then type \f[B]fg\f[R] (or send \f[I]SIGCONT\f[R]) to resume.
.PP
When you close the terminal to which reclog is writing/reading (e.g.
you close the terminal emulator window when reclog is running), kernel
automatically generates \f[I]SIGHUP\f[R].
reclog propagates the signal to the child PGID and waits until child
exits or \f[B]\-q\f[R] timeout expires.
If the child didn\(aqt exit, it is killed forcibly with
\f[I]SIGKILL\f[R].
.PP
If reclog crashes or aborts due to unexpected error, it does not attempt
to perform graceful termination.
However, once reclog is killed, kernel closes the master pty and sends
\f[I]SIGHUP\f[R] to processes which use the slave pty.
Unless child handles \f[I]SIGHUP\f[R] specially or explicitly changes
controlling tty, it will be killed by this signal.
.SH EXIT STATUS
.IP \(bu 2
If system error happens (like file can\(aqt be opened), reclog exits
with status \f[I]1\f[R].
.IP \(bu 2
If usage error happens (like invalid option value), reclog exits with
status \f[I]2\f[R].
.IP \(bu 2
If the specified command can\(aqt be launched, reclog exits with status
\f[I]126\f[R].
.IP \(bu 2
If the command exits with status \f[I]N\f[R], reclog exits with the same
status \f[I]N\f[R].
.IP \(bu 2
If the command is killed by signal \f[I]N\f[R], reclog exits with the
status \f[I]128 + N\f[R].
.SH CAVEATS
reclog makes several assumptions about the command it runs:
.IP \(bu 2
The output and input should be textual and line\-oriented, otherwise
errors are possible.
.IP \(bu 2
The command should be a non\-interactive program that uses terminal in
canonical mode, otherwise data corruption and freezes are possible.
.IP \(bu 2
The command should keep its child processes (if any) in the same process
group and with the same controlling TTY, otherwise they may remain
dangling.
.SH EXAMPLES
Specify output file:
.IP
.EX
$ reclog \-o test.log ping \-c3 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=111 time=24.9 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=111 time=24.5 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=111 time=34.3 ms

\-\-\- 8.8.8.8 ping statistics \-\-\-
3 packets transmitted, 3 received, 0% packet loss, time 2002ms
rtt min/avg/max/mdev = 24.464/27.870/34.295/4.545 ms

$ cat test.log
\&...
.EE
.PP
Overwrite file:
.IP
.EX
$ reclog \-f \-o test.log ping \-c3 8.8.8.8
\&...

$ cat test.log
\&...
.EE
.PP
Append to file:
.IP
.EX
$ reclog \-a \-o test.log ping \-c3 8.8.8.8
\&...

$ cat test.log
\&...
.EE
.PP
Automatic file name:
.IP
.EX
$ reclog ping \-c3 8.8.8.8
\&...

$ cat ping.log
\&...

$ reclog ping \-c3 8.8.8.8
\&...

$ cat ping\-1.log
\&...
.EE
.PP
Enable header and timestamps:
.IP
.EX
$ reclog \-Ht ping \-c3 8.8.8.8
# HOST=[example] OS=[linux_x86_64] TIME=[2025\-01\-01 12:30:00 +0000] CMD=[ping \-c3 8.8.8.8]
12:30:00.022 PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
12:30:00.023 64 bytes from 8.8.8.8: icmp_seq=1 ttl=111 time=25.5 ms
12:30:00.048 64 bytes from 8.8.8.8: icmp_seq=2 ttl=111 time=24.7 ms
12:30:01.048 64 bytes from 8.8.8.8: icmp_seq=3 ttl=111 time=24.3 ms
12:30:02.049
12:30:02.049 \-\-\- 8.8.8.8 ping statistics \-\-\-
12:30:02.049 3 packets transmitted, 3 received, 0% packet loss, time 2002ms
12:30:02.049 rtt min/avg/max/mdev = 24.340/24.841/25.484/0.477 ms
.EE
.PP
Process stdin:
.IP
.EX
$ ls /usr/local | reclog cat \-n
     1  bin
     2  etc
     3  games
     4  include
     5  lib
     6  libexec
     7  man
     8  sbin
     9  share
    10  src
.EE
.SH REPORTING BUGS
Please report any bugs found via GitHub
(\f[I]https://github.com/gavv/reclog/\f[R]).
.SH HISTORY
See CHANGES.md file for the release history.
.SH AUTHORS
See AUTHORS.md file for the list of authors and contributors.
.SH COPYRIGHT
2025, Victor Gaydov and contributors.
.PP
Licensed under MIT license, see LICENSE file for details.
.SH SEE ALSO
\f[B]unbuffer(1)\f[R], \f[B]tee(1)\f[R], \f[B]ts(1)\f[R]
